; free-algebra

(defun extract-all-equations (labled-algebra)
  "Returns all equations given by LABLED-ALGEBRA"
  (let ((found-equations ()))
    (iterate-over-array labled-algebra i j
      (when (and (>= i 1) (>= j 1))
        (push (list (list (get-operation-symbol labled-algebra)
                          (aref labled-algebra i 0)
                          (aref labled-algebra 0 j))
                    (aref labled-algebra i j))
              found-equations)))
    found-equations))

;;; eliminating dependent equations

(defun show-all-equations (algebra generating-elements n)
  "Shows all equations represented by the free algebra ALGEBRA 
generated by GENERATING-ELEMENTS being weakly-independent
of level n."
  (mapc #'pprint-term-pair
        (remove-all-weakly-dependent-equations 
          (extract-all-equations 
            (label-numbers-in-algebra algebra generating-elements)) 
          n))
  (values))

;;; test cases

(set-variable-set '(v0 v1 v2 v3 v4 v5))
(set-signature '((+ 2)))

; define interpretation of an operation in *signature*
; with a values table
(defparameter *free-algebra*
  #2A((+ 0 1 2 3 4)
      (0 0 2 3 3 2)
      (1 2 1 4 2 4)
      (2 3 4 2 3 4)
      (3 3 2 3 3 2)
      (4 2 4 4 2 4)))

(defun test-case-1 ()
  (show-all-equations *free-algebra* 
                      (calculate-generating-elements (list *free-algebra*))
                      2))
